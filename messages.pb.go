// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messages.proto

/*
Package pbuf is a generated protocol buffer package.

It is generated from these files:
	messages.proto

It has these top-level messages:
	Employee
	GetAllRequest
	GetByBadgeNumberRequest
	EmployeeRequest
	AddPhotoRequest
	AddPhotoResponse
	EmployeeResponse
*/
package pbuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Structures of data that we wish to send
type Employee struct {
	Id                  int32   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	BadgeNumber         int32   `protobuf:"varint,2,opt,name=badgeNumber" json:"badgeNumber,omitempty"`
	FirstName           string  `protobuf:"bytes,3,opt,name=firstName" json:"firstName,omitempty"`
	LastName            string  `protobuf:"bytes,4,opt,name=lastName" json:"lastName,omitempty"`
	VacationAccrualRate float32 `protobuf:"fixed32,5,opt,name=vacationAccrualRate" json:"vacationAccrualRate,omitempty"`
	VacationAccrued     float32 `protobuf:"fixed32,6,opt,name=vacationAccrued" json:"vacationAccrued,omitempty"`
}

func (m *Employee) Reset()                    { *m = Employee{} }
func (m *Employee) String() string            { return proto.CompactTextString(m) }
func (*Employee) ProtoMessage()               {}
func (*Employee) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Employee) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Employee) GetBadgeNumber() int32 {
	if m != nil {
		return m.BadgeNumber
	}
	return 0
}

func (m *Employee) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Employee) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Employee) GetVacationAccrualRate() float32 {
	if m != nil {
		return m.VacationAccrualRate
	}
	return 0
}

func (m *Employee) GetVacationAccrued() float32 {
	if m != nil {
		return m.VacationAccrued
	}
	return 0
}

// Wrappers -> for requests and responses
type GetAllRequest struct {
}

func (m *GetAllRequest) Reset()                    { *m = GetAllRequest{} }
func (m *GetAllRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAllRequest) ProtoMessage()               {}
func (*GetAllRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GetByBadgeNumberRequest struct {
	BadgeNumber int32 `protobuf:"varint,1,opt,name=badgeNumber" json:"badgeNumber,omitempty"`
}

func (m *GetByBadgeNumberRequest) Reset()                    { *m = GetByBadgeNumberRequest{} }
func (m *GetByBadgeNumberRequest) String() string            { return proto.CompactTextString(m) }
func (*GetByBadgeNumberRequest) ProtoMessage()               {}
func (*GetByBadgeNumberRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetByBadgeNumberRequest) GetBadgeNumber() int32 {
	if m != nil {
		return m.BadgeNumber
	}
	return 0
}

type EmployeeRequest struct {
	Employee *Employee `protobuf:"bytes,1,opt,name=employee" json:"employee,omitempty"`
}

func (m *EmployeeRequest) Reset()                    { *m = EmployeeRequest{} }
func (m *EmployeeRequest) String() string            { return proto.CompactTextString(m) }
func (*EmployeeRequest) ProtoMessage()               {}
func (*EmployeeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *EmployeeRequest) GetEmployee() *Employee {
	if m != nil {
		return m.Employee
	}
	return nil
}

type AddPhotoRequest struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *AddPhotoRequest) Reset()                    { *m = AddPhotoRequest{} }
func (m *AddPhotoRequest) String() string            { return proto.CompactTextString(m) }
func (*AddPhotoRequest) ProtoMessage()               {}
func (*AddPhotoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AddPhotoRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type AddPhotoResponse struct {
	IsOk bool `protobuf:"varint,1,opt,name=isOk" json:"isOk,omitempty"`
}

func (m *AddPhotoResponse) Reset()                    { *m = AddPhotoResponse{} }
func (m *AddPhotoResponse) String() string            { return proto.CompactTextString(m) }
func (*AddPhotoResponse) ProtoMessage()               {}
func (*AddPhotoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AddPhotoResponse) GetIsOk() bool {
	if m != nil {
		return m.IsOk
	}
	return false
}

type EmployeeResponse struct {
	Employee *Employee `protobuf:"bytes,1,opt,name=employee" json:"employee,omitempty"`
}

func (m *EmployeeResponse) Reset()                    { *m = EmployeeResponse{} }
func (m *EmployeeResponse) String() string            { return proto.CompactTextString(m) }
func (*EmployeeResponse) ProtoMessage()               {}
func (*EmployeeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *EmployeeResponse) GetEmployee() *Employee {
	if m != nil {
		return m.Employee
	}
	return nil
}

func init() {
	proto.RegisterType((*Employee)(nil), "Employee")
	proto.RegisterType((*GetAllRequest)(nil), "GetAllRequest")
	proto.RegisterType((*GetByBadgeNumberRequest)(nil), "GetByBadgeNumberRequest")
	proto.RegisterType((*EmployeeRequest)(nil), "EmployeeRequest")
	proto.RegisterType((*AddPhotoRequest)(nil), "AddPhotoRequest")
	proto.RegisterType((*AddPhotoResponse)(nil), "AddPhotoResponse")
	proto.RegisterType((*EmployeeResponse)(nil), "EmployeeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EmployeeService service

type EmployeeServiceClient interface {
	GetByBadgeNumber(ctx context.Context, in *GetByBadgeNumberRequest, opts ...grpc.CallOption) (*EmployeeResponse, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (EmployeeService_GetAllClient, error)
	SaveEmployee(ctx context.Context, in *EmployeeRequest, opts ...grpc.CallOption) (*EmployeeResponse, error)
	SaveAll(ctx context.Context, opts ...grpc.CallOption) (EmployeeService_SaveAllClient, error)
	AddPhoto(ctx context.Context, opts ...grpc.CallOption) (EmployeeService_AddPhotoClient, error)
}

type employeeServiceClient struct {
	cc *grpc.ClientConn
}

func NewEmployeeServiceClient(cc *grpc.ClientConn) EmployeeServiceClient {
	return &employeeServiceClient{cc}
}

func (c *employeeServiceClient) GetByBadgeNumber(ctx context.Context, in *GetByBadgeNumberRequest, opts ...grpc.CallOption) (*EmployeeResponse, error) {
	out := new(EmployeeResponse)
	err := grpc.Invoke(ctx, "/EmployeeService/GetByBadgeNumber", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (EmployeeService_GetAllClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EmployeeService_serviceDesc.Streams[0], c.cc, "/EmployeeService/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &employeeServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EmployeeService_GetAllClient interface {
	Recv() (*EmployeeResponse, error)
	grpc.ClientStream
}

type employeeServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *employeeServiceGetAllClient) Recv() (*EmployeeResponse, error) {
	m := new(EmployeeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *employeeServiceClient) SaveEmployee(ctx context.Context, in *EmployeeRequest, opts ...grpc.CallOption) (*EmployeeResponse, error) {
	out := new(EmployeeResponse)
	err := grpc.Invoke(ctx, "/EmployeeService/SaveEmployee", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) SaveAll(ctx context.Context, opts ...grpc.CallOption) (EmployeeService_SaveAllClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EmployeeService_serviceDesc.Streams[1], c.cc, "/EmployeeService/SaveAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &employeeServiceSaveAllClient{stream}
	return x, nil
}

type EmployeeService_SaveAllClient interface {
	Send(*EmployeeRequest) error
	Recv() (*EmployeeResponse, error)
	grpc.ClientStream
}

type employeeServiceSaveAllClient struct {
	grpc.ClientStream
}

func (x *employeeServiceSaveAllClient) Send(m *EmployeeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *employeeServiceSaveAllClient) Recv() (*EmployeeResponse, error) {
	m := new(EmployeeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *employeeServiceClient) AddPhoto(ctx context.Context, opts ...grpc.CallOption) (EmployeeService_AddPhotoClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EmployeeService_serviceDesc.Streams[2], c.cc, "/EmployeeService/AddPhoto", opts...)
	if err != nil {
		return nil, err
	}
	x := &employeeServiceAddPhotoClient{stream}
	return x, nil
}

type EmployeeService_AddPhotoClient interface {
	Send(*AddPhotoRequest) error
	CloseAndRecv() (*AddPhotoResponse, error)
	grpc.ClientStream
}

type employeeServiceAddPhotoClient struct {
	grpc.ClientStream
}

func (x *employeeServiceAddPhotoClient) Send(m *AddPhotoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *employeeServiceAddPhotoClient) CloseAndRecv() (*AddPhotoResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AddPhotoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for EmployeeService service

type EmployeeServiceServer interface {
	GetByBadgeNumber(context.Context, *GetByBadgeNumberRequest) (*EmployeeResponse, error)
	GetAll(*GetAllRequest, EmployeeService_GetAllServer) error
	SaveEmployee(context.Context, *EmployeeRequest) (*EmployeeResponse, error)
	SaveAll(EmployeeService_SaveAllServer) error
	AddPhoto(EmployeeService_AddPhotoServer) error
}

func RegisterEmployeeServiceServer(s *grpc.Server, srv EmployeeServiceServer) {
	s.RegisterService(&_EmployeeService_serviceDesc, srv)
}

func _EmployeeService_GetByBadgeNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByBadgeNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).GetByBadgeNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmployeeService/GetByBadgeNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).GetByBadgeNumber(ctx, req.(*GetByBadgeNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EmployeeServiceServer).GetAll(m, &employeeServiceGetAllServer{stream})
}

type EmployeeService_GetAllServer interface {
	Send(*EmployeeResponse) error
	grpc.ServerStream
}

type employeeServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *employeeServiceGetAllServer) Send(m *EmployeeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EmployeeService_SaveEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).SaveEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmployeeService/SaveEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).SaveEmployee(ctx, req.(*EmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_SaveAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EmployeeServiceServer).SaveAll(&employeeServiceSaveAllServer{stream})
}

type EmployeeService_SaveAllServer interface {
	Send(*EmployeeResponse) error
	Recv() (*EmployeeRequest, error)
	grpc.ServerStream
}

type employeeServiceSaveAllServer struct {
	grpc.ServerStream
}

func (x *employeeServiceSaveAllServer) Send(m *EmployeeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *employeeServiceSaveAllServer) Recv() (*EmployeeRequest, error) {
	m := new(EmployeeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EmployeeService_AddPhoto_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EmployeeServiceServer).AddPhoto(&employeeServiceAddPhotoServer{stream})
}

type EmployeeService_AddPhotoServer interface {
	SendAndClose(*AddPhotoResponse) error
	Recv() (*AddPhotoRequest, error)
	grpc.ServerStream
}

type employeeServiceAddPhotoServer struct {
	grpc.ServerStream
}

func (x *employeeServiceAddPhotoServer) SendAndClose(m *AddPhotoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *employeeServiceAddPhotoServer) Recv() (*AddPhotoRequest, error) {
	m := new(AddPhotoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _EmployeeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "EmployeeService",
	HandlerType: (*EmployeeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByBadgeNumber",
			Handler:    _EmployeeService_GetByBadgeNumber_Handler,
		},
		{
			MethodName: "SaveEmployee",
			Handler:    _EmployeeService_SaveEmployee_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _EmployeeService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SaveAll",
			Handler:       _EmployeeService_SaveAll_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "AddPhoto",
			Handler:       _EmployeeService_AddPhoto_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "messages.proto",
}

func init() { proto.RegisterFile("messages.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 388 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcd, 0xae, 0xd2, 0x40,
	0x14, 0xce, 0xd4, 0x7b, 0xb1, 0x9c, 0x7b, 0xa1, 0x65, 0x5c, 0xd8, 0x10, 0x17, 0x4d, 0x13, 0x4c,
	0x37, 0x8e, 0x08, 0x1b, 0x8d, 0x0b, 0x03, 0x89, 0x61, 0x87, 0xa6, 0xec, 0xdc, 0x98, 0x69, 0xe7,
	0x80, 0x8d, 0x2d, 0xad, 0x9d, 0x29, 0x09, 0x0f, 0xe3, 0x4b, 0xf9, 0x44, 0x86, 0xb1, 0x3f, 0x52,
	0xb8, 0x09, 0xbb, 0x33, 0xdf, 0x4f, 0xce, 0x39, 0xdf, 0xcc, 0xc0, 0x30, 0x45, 0x29, 0xf9, 0x0e,
	0x25, 0xcb, 0x8b, 0x4c, 0x65, 0xde, 0x1f, 0x02, 0xe6, 0xe7, 0x34, 0x4f, 0xb2, 0x23, 0x22, 0x1d,
	0x82, 0x11, 0x0b, 0x87, 0xb8, 0xc4, 0xbf, 0x0f, 0x8c, 0x58, 0x50, 0x17, 0x1e, 0x42, 0x2e, 0x76,
	0xb8, 0x2e, 0xd3, 0x10, 0x0b, 0xc7, 0xd0, 0xc4, 0xff, 0x10, 0x7d, 0x05, 0xfd, 0x6d, 0x5c, 0x48,
	0xb5, 0xe6, 0x29, 0x3a, 0xcf, 0x5c, 0xe2, 0xf7, 0x83, 0x16, 0xa0, 0x63, 0x30, 0x13, 0x5e, 0x91,
	0x77, 0x9a, 0x6c, 0xce, 0x74, 0x0a, 0x2f, 0x0e, 0x3c, 0xe2, 0x2a, 0xce, 0xf6, 0x8b, 0x28, 0x2a,
	0x4a, 0x9e, 0x04, 0x5c, 0xa1, 0x73, 0xef, 0x12, 0xdf, 0x08, 0xae, 0x51, 0xd4, 0x07, 0xeb, 0x0c,
	0x46, 0xe1, 0xf4, 0xb4, 0xba, 0x0b, 0x7b, 0x16, 0x0c, 0x56, 0xa8, 0x16, 0x49, 0x12, 0xe0, 0xaf,
	0x12, 0xa5, 0xf2, 0x3e, 0xc2, 0xcb, 0x15, 0xaa, 0xe5, 0x71, 0xd9, 0x8e, 0x5e, 0x51, 0xdd, 0x1d,
	0xc9, 0xc5, 0x8e, 0xde, 0x7b, 0xb0, 0xea, 0x84, 0x6a, 0xd3, 0x04, 0x4c, 0xac, 0x20, 0xed, 0x78,
	0x98, 0xf5, 0x59, 0xa3, 0x69, 0x28, 0x6f, 0x02, 0xd6, 0x42, 0x88, 0xaf, 0x3f, 0x32, 0x95, 0xd5,
	0x4e, 0x0a, 0x77, 0x82, 0x2b, 0xae, 0x5d, 0x8f, 0x81, 0xae, 0xbd, 0xd7, 0x60, 0xb7, 0x32, 0x99,
	0x67, 0x7b, 0x89, 0x27, 0x5d, 0x2c, 0xbf, 0xfc, 0xd4, 0x3a, 0x33, 0xd0, 0xb5, 0xf7, 0x01, 0xec,
	0x76, 0x90, 0x4a, 0x77, 0xdb, 0x24, 0xb3, 0xdf, 0x46, 0xbb, 0xc4, 0x06, 0x8b, 0x43, 0x1c, 0x21,
	0xfd, 0x04, 0x76, 0x37, 0x14, 0xea, 0xb0, 0x27, 0x72, 0x1a, 0x8f, 0xd8, 0x45, 0xef, 0x37, 0xd0,
	0xfb, 0x17, 0x33, 0x1d, 0xb2, 0xb3, 0xbc, 0xaf, 0x88, 0xa7, 0x84, 0xce, 0xe1, 0x71, 0xc3, 0x0f,
	0xd8, 0xbc, 0x36, 0x9b, 0x75, 0x62, 0xbd, 0xd6, 0x63, 0x06, 0xcf, 0x4f, 0xa6, 0x53, 0x93, 0x5b,
	0xf4, 0x3e, 0x99, 0x12, 0xfa, 0x0e, 0xcc, 0x3a, 0x4f, 0x6a, 0xb3, 0xce, 0x0d, 0x8c, 0x47, 0xac,
	0x1b, 0xb6, 0x4f, 0x96, 0xd6, 0xb7, 0x81, 0x40, 0xf9, 0x7d, 0x57, 0xe4, 0xd1, 0xdb, 0x3c, 0x2c,
	0xb7, 0x61, 0x4f, 0x7f, 0x8f, 0xf9, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa2, 0xfd, 0x1b, 0x01,
	0x30, 0x03, 0x00, 0x00,
}
